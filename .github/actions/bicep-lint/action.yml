# filepath: /.github/actions/bicep-lint/action.yml
name: 'Bicep Lint'
description: 'Runs az bicep lint'

inputs:
  root_iac_folder_relative_path:
    description: 'Directory containing bicepconfig.json and source files'
    required: true
  bicep_file_path:
    description: 'Path to the main Bicep file to lint'
    required: true

runs:
  using: "composite"
  steps:
    - name: Run Bicep Lint
      shell: bash
      working-directory: ${{ inputs.root_iac_folder_relative_path }}
      run: |
        echo "Running Bicep Lint on ${{ inputs.bicep_file_path }}..."
        # Add logic here to check for bicepconfig.json and copy default if needed
        # Example:
        # if [ ! -f "bicepconfig.json" ]; then
        #   echo "bicepconfig.json not found, consider adding one."
        #   # cp ${{ github.action_path }}/default.bicepconfig.json .
        # fi
        az bicep lint --file ${{ inputs.bicep_file_path }}

    - name: Bicep Build & Validate
      shell: bash
      working-directory: ${{ inputs.root_iac_folder_relative_path }}
      run: |
        echo "Building and validating Bicep template..."
        
        # Check if main.bicep exists
        if [[ ! -f "main.bicep" ]]; then
          echo "Error: main.bicep file not found in ${{ env.BICEP_ROOT_PATH }}"
          exit 1
        fi
        
        # Build the Bicep file to ARM template
        az bicep build --file main.bicep --outfile compiled.arm.json
        
        # Validate based on scope
        case "${{ inputs.deployment_scope }}" in
          resourceGroup)
            if [[ -z "${{ inputs.resource_group_name }}" ]]; then
              echo "Error: resource_group_name is required for resourceGroup scope"
              exit 1
            fi
            cmd="az stack group validate"
            cmd+=" --name ${{ steps.stack-name.outputs.stack_name }}"
            cmd+=" --resource-group ${{ inputs.resource_group_name }}"
            cmd+=" --template-file compiled.arm.json"
            
            # Add parameters file if provided
            if [[ -n "${{ inputs.parameters_file_path }}" ]]; then
              cmd+=" --parameters @${{ inputs.parameters_file_path }}"
            fi
            
            cmd+=" --action-on-unmanage ${{ inputs.action_on_unmanage }}"
            cmd+=" --deny-settings-mode ${{ inputs.deny_settings_mode }}"
            ;;
          subscription)
            if [[ -z "${{ inputs.location }}" ]]; then
              echo "Error: location is required for subscription scope"
              exit 1
            fi
            cmd="az stack sub validate"
            cmd+=" --name ${{ steps.stack-name.outputs.stack_name }}"
            cmd+=" --location ${{ inputs.location }}"
            cmd+=" --template-file compiled.arm.json"
            
            # Add parameters file if provided
            if [[ -n "${{ inputs.parameters_file_path }}" ]]; then
              cmd+=" --parameters @${{ inputs.parameters_file_path }}"
            fi
            
            cmd+=" --action-on-unmanage ${{ inputs.action_on_unmanage }}"
            cmd+=" --deny-settings-mode ${{ inputs.deny_settings_mode }}"
            ;;
          managementGroup)
            if [[ -z "${{ inputs.management_group_id }}" ]]; then
              echo "Error: management_group_id is required for managementGroup scope"
              exit 1
            fi
            if [[ -z "${{ inputs.location }}" ]]; then
              echo "Error: location is required for managementGroup scope"
              exit 1
            fi
            cmd="az stack mg validate"
            cmd+=" --name ${{ steps.stack-name.outputs.stack_name }}"
            cmd+=" --management-group-id ${{ inputs.management_group_id }}"
            cmd+=" --location ${{ inputs.location }}"
            cmd+=" --template-file compiled.arm.json"
            
            # Add parameters file if provided
            if [[ -n "${{ inputs.parameters_file_path }}" ]]; then
              cmd+=" --parameters @${{ inputs.parameters_file_path }}"
            fi
            
            cmd+=" --action-on-unmanage ${{ inputs.action_on_unmanage }}"
            cmd+=" --deny-settings-mode ${{ inputs.deny_settings_mode }}"
            ;;
          *)
            echo "Error: Unsupported deployment scope: ${{ inputs.deployment_scope }}"
            echo "Supported scopes: resourceGroup, subscription, managementGroup"
            exit 1
            ;;
        esac
        
        echo "Executing: $cmd"
        $cmd
        echo "Bicep validation completed successfully"