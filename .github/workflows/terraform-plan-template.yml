name: Terraform plan template
on:
  workflow_call:
    inputs:
      # required inputs
      target_environment:
        description: 'The environment run the workflow against'
        type: string
      tfvars_file:
        description: 'Comma seperated list of paths to optional tfvars files. Paths are relative to the terraform root path.'
        type: string

      # optional inputs
      azure_subscription_id:
        description: 'Deployment Subscription ID. Only required if creating a subscription as part of the deployment. Otherwise uses environment secrets.'
        type: string
      deploy_backend:
        description: 'Deploy the Terraform backend (storage account and containers) if not already deployed'
        type: boolean
        default: false
      destroy_resources:
        description: 'Run a terraform destroy instead of apply'
        type: boolean
        default: false        
      enable_checkov:
        description: 'Enable Checkov scan of the terraform code'
        type: boolean
        default: true
      enable_static_analysis_checks:
        description: 'Enable TFLint, terraform validate & format checks'
        type: boolean
        default: true
      root_module_folder_relative_path:
        description: 'Relative path to root of Terraform code (usually ./iac)'
        default: './iac'
        type: string
      runner_name:
        description: 'The name of the runner pool to run on'
        type: string
        default: 'ubuntu-latest'
      terraform_cli_version:
        description: 'Terraform CLI Version'
        default: 'latest'
        type: string
      tf_state_storage_container_key:
        description: 'Backend Azure Storage Account Container key for Terraform state, e.g. terraform.tfstate'
        default: 'terraform.tfstate'
        type: string
      unlock_resource_firewalls:
        description: 'Unlock firewall for tf state storage and any extra unlocks'
        default: false
        type: boolean
      upload_artifact:
        description: 'Upload the terraform plan artifact to blob storage.  This is set to false by the calling workflow if the terraform action is plan.'
        type: boolean
        default: true

jobs:
  plan:
    name: "Terraform Plan${{ inputs.destroy_resources && ' Destroy' || '' }}"
    runs-on: ${{ inputs.runner_name }}
    environment: ${{ inputs.target_environment }}
    concurrency:
        group: tfstate-${{ inputs.target_environment }}
    permissions:
        id-token: write
        contents: read
        security-events: write
        pull-requests: write
    env:
        ## azure resource manager vars
        ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
        ARM_SUBSCRIPTION_ID: "${{ inputs.azure_subscription_id || secrets.ARM_SUBSCRIPTION_ID }}"
        ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
        ARM_USE_AZUREAD: true
        ARM_USE_OIDC: true
        ## backend vars
        TF_STATE_SUBSCRIPTION_ID: ${{ secrets.TF_STATE_SUBSCRIPTION_ID != '' && secrets.TF_STATE_SUBSCRIPTION_ID || ( secrets.ARM_SUBSCRIPTION_ID != '' && secrets.ARM_SUBSCRIPTION_ID || inputs.azure_subscription_id )}}
        TF_STATE_RESOURCE_GROUP_NAME: ${{ secrets.TF_STATE_RESOURCE_GROUP_NAME }}
        TF_STATE_STORAGE_ACCOUNT_NAME: ${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}
        TF_STATE_STORAGE_CONTAINER_NAME: ${{ secrets.TF_STATE_STORAGE_CONTAINER_NAME || 'tfstate' }}
        TF_STATE_STORAGE_CONTAINER_KEY: ${{ inputs.tf_state_storage_container_key || 'terraform.tfstate' }}
        # the artifact storage account is used as a more secure way to store the terraform plan artifact
        ARTIFACT_STORAGE_CONTAINER_NAME:  ${{ secrets.ARTIFACT_STORAGE_CONTAINER_NAME || 'tfartifact' }}

        ## environment differences
        TF_VAR_FILE: ${{ inputs.tfvars_file }}

        # allows for dynamic unlocking of firewalls.
        EXTRA_FIREWALL_UNLOCKS: ${{ vars.EXTRA_FIREWALL_UNLOCKS }}
        # provide additional terraform variables via TF_VAR_ environment variables
        EXTRA_TF_VARS: ${{ vars.EXTRA_TF_VARS }}
        # https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#controlling-terraform-output-in-automation
        TF_IN_AUTOMATION: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.TF_STATE_SUBSCRIPTION_ID }}
        
      - name: Unlock Resource Firewalls
        if: ${{ inputs.unlock_resource_firewalls }}
        uses: kewalaka/github-azure-iac-templates/.github/actions/azure-unlock-firewall@main
        with:
          OPERATION: "Allow"
          TF_STATE_SUBSCRIPTION_ID: ${{ env.TF_STATE_SUBSCRIPTION_ID  }}
          TF_STATE_RESOURCE_GROUP_NAME: ${{ env.TF_STATE_RESOURCE_GROUP_NAME }}
          TF_STATE_STORAGE_ACCOUNT_NAME: ${{ env.TF_STATE_STORAGE_ACCOUNT_NAME }}
          EXTRA_FIREWALL_UNLOCKS: "${{ env.EXTRA_FIREWALL_UNLOCKS }}"

      - name: Check for Terraform Backend Storage and RBAC
        if: ${{ inputs.deploy_backend }}
        uses: kewalaka/github-azure-iac-templates/.github/actions/terraform-backend@main
        with:
          resource_group_name: ${{ env.TF_STATE_RESOURCE_GROUP_NAME }}
          storage_account_name: ${{ env.TF_STATE_STORAGE_ACCOUNT_NAME }}
          state_container_name: ${{ env.TF_STATE_STORAGE_CONTAINER_NAME }}
          artifact_container_name: ${{ env.ARTIFACT_STORAGE_CONTAINER_NAME }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
            terraform_wrapper: false
            terraform_version: ${{ inputs.terraform_cli_version }}            

      - name: Terraform Init
        shell: bash
        working-directory: ${{ inputs.root_module_folder_relative_path }}
        run: |
          TF_INIT_CMD="terraform init \
            -backend-config=\"subscription_id=${{ env.TF_STATE_SUBSCRIPTION_ID }}\" \
            -backend-config=\"resource_group_name=${{ env.TF_STATE_RESOURCE_GROUP_NAME }}\" \
            -backend-config=\"storage_account_name=${{ env.TF_STATE_STORAGE_ACCOUNT_NAME }}\" \
            -backend-config=\"container_name=${{ env.TF_STATE_STORAGE_CONTAINER_NAME }}\" \
            -backend-config=\"key=${{ env.TF_STATE_STORAGE_CONTAINER_KEY }}\""

          echo "About to run: $TF_INIT_CMD"
          eval $TF_INIT_CMD
        
      - name: Terraform Lint
        if: ${{ inputs.enable_static_analysis_checks }}
        uses: kewalaka/github-azure-iac-templates/.github/actions/terraform-lint@main
        with:
          root_module_folder_relative_path: ${{ inputs.root_module_folder_relative_path }}
          tfvars_file: ${{ env.TF_VAR_FILE }}

      - name: "Terraform Plan${{ inputs.destroy_resources && ' Destroy' || '' }}"
        id: plan
        uses: kewalaka/github-azure-iac-templates/.github/actions/terraform-plan@main
        with:
          root_module_folder_relative_path: ${{ inputs.root_module_folder_relative_path }}
          destroy_resources: ${{ inputs.destroy_resources }}
          tfvars_file: ${{ env.TF_VAR_FILE }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Scan
        if: ${{ !inputs.enable_checkov }}
        uses: kewalaka/github-azure-iac-templates/.github/actions/checkov-terraform@feat/checkov-fixes
        with:
          root_module_folder_relative_path: ${{ inputs.root_module_folder_relative_path }}

      - name: Create and Publish Terraform Artifact
        if: ${{ inputs.upload_artifact }}
        shell: bash
        working-directory: ${{ inputs.root_module_folder_relative_path }}
        run: |
          set -e
          INSTALL_TEMP=$RUNNER_TEMP/$(uuidgen)
          mkdir $INSTALL_TEMP
          archive_name="${GITHUB_RUN_ID}.tar.gz"

          # Create a tar.gz archive of the current directory, excluding unwanted folders
          tar --exclude='.git' \
              --exclude='.terraform' \
              --exclude='.github' \
              -czf "$INSTALL_TEMP/$archive_name" .

          # Upload the artifact to Azure Blob Storage
          az account set --subscription ${{ env.TF_STATE_SUBSCRIPTION_ID }} 
          az storage blob upload \
            --auth-mode login \
            --account-name "${{ env.TF_STATE_STORAGE_ACCOUNT_NAME }}" \
            --container-name "${{ env.ARTIFACT_STORAGE_CONTAINER_NAME }}" \
            --file "$INSTALL_TEMP/$archive_name" \
            --name "$archive_name"

      - name: Lock Resource Firewalls
        if: ${{ always() && inputs.unlock_resource_firewalls }}
        uses: kewalaka/github-azure-iac-templates/.github/actions/azure-unlock-firewall@main
        with:
          OPERATION: "Deny"
          TF_STATE_SUBSCRIPTION_ID: ${{ env.TF_STATE_SUBSCRIPTION_ID  }}
          TF_STATE_RESOURCE_GROUP_NAME: ${{ env.TF_STATE_RESOURCE_GROUP_NAME }}
          TF_STATE_STORAGE_ACCOUNT_NAME: ${{ env.TF_STATE_STORAGE_ACCOUNT_NAME }}
          EXTRA_FIREWALL_UNLOCKS: "${{ env.EXTRA_FIREWALL_UNLOCKS }}"