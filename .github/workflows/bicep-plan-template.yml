name: Bicep plan template
on:
  workflow_call:
    inputs:
      # required inputs
      target_environment:
        description: 'The environment run the workflow against'
        type: string
      
      # --- Scope-related inputs ---
      deployment_scope:
        description: 'Scope of deployment: resourceGroup, subscription, or managementGroup'
        type: string
        default: 'resourceGroup'
      resource_group_name:
        description: 'Azure Resource Group name (required if scope is resourceGroup)'
        type: string
        default: ''
      management_group_id:
        description: 'Management Group ID (required if scope is managementGroup)'
        type: string
        default: ''
      location:
        description: 'Azure region for deployment (required except for managementGroup scope)'
        type: string
        default: ''

      # --- Stack-related inputs ---
      deployment_stack_name:
        description: 'Name for the deployment stack (auto-generated if not provided)'
        type: string
        default: ''
      action_on_unmanage:
        description: 'What happens to resources no longer managed by the stack'
        type: string
        default: 'detachAll'
      deny_settings_mode:
        description: 'Operations denied on stack-managed resources'
        type: string
        default: 'none'

      # --- Remaining inputs ---
      azure_subscription_id:
        description: 'Deployment Subscription ID. Only required if creating a subscription as part of the deployment. Otherwise use Env vars'
        type: string
      enable_checkov:
        type: boolean
        default: true
      parameters_file_path:
        description: 'Path to bicep parameters file. Path is relative to the bicep root path.'
        type: string
      root_iac_folder_relative_path:
        description: 'Relative path to root of Bicep code (usually ./iac)'
        default: './iac'
        type: string
      runner_name:
        description: 'The name of the runner pool to run on'
        type: string
        default: 'ubuntu-latest'

jobs:
  plan:
    name: "Bicep Plan"
    runs-on: ${{ inputs.runner_name }}
    environment: ${{ inputs.target_environment }}
    permissions:
        id-token: write
        contents: read
    env:
        ## azure resource manager vars
        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
        ARM_SUBSCRIPTION_ID: "${{ inputs.azure_subscription_id || secrets.AZURE_SUBSCRIPTION_ID }}"
        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
        ARM_USE_AZUREAD: true
        ARM_USE_OIDC: true
        BICEP_ROOT_PATH: ${{ inputs.root_iac_folder_relative_path }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Stack Name
        id: stack-name
        shell: bash
        run: |
          if [[ -n "${{ inputs.deployment_stack_name }}" ]]; then
            echo "stack_name=${{ inputs.deployment_stack_name }}" >> $GITHUB_OUTPUT
          else
            # Try to infer from repository name
            repo_name="${{ github.repository }}"
            repo_name="${repo_name##*/}"  # Remove owner prefix
            repo_name="${repo_name,,}"    # Convert to lowercase
            repo_name="${repo_name//_/-}" # Replace underscores with hyphens
            
            if [[ -n "$repo_name" && "$repo_name" != "" ]]; then
              stack_name="${repo_name}-stack"
            else
              # Fallback to date/time
              stack_name="stack-$(date +%Y%m%d-%H%M%S)"
            fi
            
            echo "Generated stack name: $stack_name"
            echo "stack_name=$stack_name" >> $GITHUB_OUTPUT
          fi

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Bicep Lint
        uses: ./.github/actions/bicep-lint
        with:
          root_iac_folder_relative_path: ${{ env.BICEP_ROOT_PATH }}
          bicep_file_path: ${{ env.BICEP_ROOT_PATH }}/main.bicep

      - name: Bicep Build & Validate
        id: build
        shell: bash
        working-directory: ${{ env.BICEP_ROOT_PATH }}
        run: |
          echo "Building and validating Bicep template..."
          
          # Build the Bicep file to ARM template
          az bicep build --file main.bicep --outfile compiled.arm.json
          
          # Validate based on scope
          case "${{ inputs.deployment_scope }}" in
            resourceGroup)
              if [[ -z "${{ inputs.resource_group_name }}" ]]; then
                echo "Error: resource_group_name is required for resourceGroup scope"
                exit 1
              fi
              az stack group validate \
                --resource-group "${{ inputs.resource_group_name }}" \
                --template-file compiled.arm.json \
                $([[ -n "${{ inputs.parameters_file_path }}" ]] && echo "--parameters ${{ inputs.parameters_file_path }}" || echo "")
              ;;
            subscription)
              az stack sub validate \
                --location "${{ inputs.location }}" \
                --template-file compiled.arm.json \
                $([[ -n "${{ inputs.parameters_file_path }}" ]] && echo "--parameters ${{ inputs.parameters_file_path }}" || echo "")
              ;;
            managementGroup)
              if [[ -z "${{ inputs.management_group_id }}" ]]; then
                echo "Error: management_group_id is required for managementGroup scope"
                exit 1
              fi
              az stack mg validate \
                --management-group-id "${{ inputs.management_group_id }}" \
                --location "${{ inputs.location }}" \
                --template-file compiled.arm.json \
                $([[ -n "${{ inputs.parameters_file_path }}" ]] && echo "--parameters ${{ inputs.parameters_file_path }}" || echo "")
              ;;
            *)
              echo "Error: Unsupported deployment scope: ${{ inputs.deployment_scope }}"
              echo "Supported scopes: resourceGroup, subscription, managementGroup"
              exit 1
              ;;
          esac
          
          echo "Bicep validation completed successfully"

      - name: Bicep What-If
        id: whatif
        shell: bash
        working-directory: ${{ env.BICEP_ROOT_PATH }}
        run: |
          echo "Running Bicep What-If analysis..."
          echo "Note: Using deployment what-if since stacks don't support what-if directly"
          
          # Run what-if based on scope using deployment commands (not stacks)
          case "${{ inputs.deployment_scope }}" in
            resourceGroup)
              WHATIF_OUTPUT=$(az deployment group what-if \
                --resource-group "${{ inputs.resource_group_name }}" \
                --name "${{ steps.stack-name.outputs.stack_name }}-whatif" \
                --template-file compiled.arm.json \
                $([[ -n "${{ inputs.parameters_file_path }}" ]] && echo "--parameters ${{ inputs.parameters_file_path }}" || echo "") \
                --result-format FullResourcePayloads)
              ;;
            subscription)
              WHATIF_OUTPUT=$(az deployment sub what-if \
                --location "${{ inputs.location }}" \
                --name "${{ steps.stack-name.outputs.stack_name }}-whatif" \
                --template-file compiled.arm.json \
                $([[ -n "${{ inputs.parameters_file_path }}" ]] && echo "--parameters ${{ inputs.parameters_file_path }}" || echo "") \
                --result-format FullResourcePayloads)
              ;;
            managementGroup)
              WHATIF_OUTPUT=$(az deployment mg what-if \
                --management-group-id "${{ inputs.management_group_id }}" \
                --location "${{ inputs.location }}" \
                --name "${{ steps.stack-name.outputs.stack_name }}-whatif" \
                --template-file compiled.arm.json \
                $([[ -n "${{ inputs.parameters_file_path }}" ]] && echo "--parameters ${{ inputs.parameters_file_path }}" || echo "") \
                --result-format FullResourcePayloads)
              ;;
          esac
          
          echo "--- What-If Output ---"
          echo "$WHATIF_OUTPUT"
          echo "--- End What-If Output ---"
          
          # Set output for PR commenting
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$WHATIF_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Bicep Scan
        id: bicep-checkov
        if: ${{ inputs.enable_checkov }}
        uses: ./.github/actions/checkov-bicep
        with:
          bicep_file_path: main.bicep
          root_iac_folder_relative_path: ${{ env.BICEP_ROOT_PATH }}

      - name: Post What-If Summary to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const whatIfOutput = `${{ steps.whatif.outputs.summary }}`;
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;

            if (!whatIfOutput || whatIfOutput.trim() === '') {
              console.log('What-if output is empty, skipping comment.');
              return;
            }

            const body = `## Bicep What-If Summary\n\n<details><summary>Click to expand What-If Output</summary>\n\n\`\`\`\n${whatIfOutput}\n\`\`\`\n\n</details>\n\n---\n*View full logs in the [GitHub Actions run](${runUrl}).*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body.substring(0, 65535) // Ensure comment isn't too long
            });
            console.log('Posted Bicep what-if comment to PR #${context.issue.number}');